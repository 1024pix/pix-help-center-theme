<main class="new_ticket content main">
    <h1 class="heading">
        {% if portal.current_language.code == "fr" %} Envoyer une demande {% elsif
        portal.current_language.code == "en" %} Send us a message {% endif %}
    </h1>
    {% if portal.current_language.code == "fr" %} Les champs marqués d'un * sont obligatoires. {%
    elsif portal.current_language.code == "en" %} The fields marked * are required. {% endif %} {%
    snippet new_ticket_form %}

    <script>
        /* La liste des articles recommandés selon le type de profil.
         * On se base sur le libellé du type de profil pour faire apparaitre les articles recommandés.
         * /!\ Attention à ne pas avoir de différence entre les deux.
         *
         * Pour conserver le formattage utiliser https://beautifier.io/ */
        const articlesRecommandes = {
            "Je travaille dans l'enseignement scolaire": [
                'Avez-vous consulté ces articles d’aide ?',
                {
                    lien: 'https://support.pix.org/fr/support/solutions/articles/15000047885',
                    contenu: 'Un élève n’arrive pas à accéder à sa campagne',
                },
                {
                    lien: 'https://support.pix.org/fr/support/solutions/articles/15000029308',
                    contenu: 'Organiser la certification dans mon établissement',
                },
                {
                    lien: 'https://support.pix.org/fr/support/solutions/articles/15000047880',
                    contenu: 'Un élève n’arrive pas à rentrer en session de certification',
                },
                {
                    lien: 'https://support.pix.org/fr/support/solutions/articles/15000041114',
                    contenu: 'Les résultats de certification ne sont pas encore disponibles',
                },
            ],
        };

        /* /!\ Lié à la manière de Freshdesk de générer le formulaire
         * Si celle ci évolue, les articles recommandés ne s'afficheront plus
         * La section peut aussi se retrouver à un autre endroit */
        const ticketTypeInput = document.getElementById('helpdesk_ticket_ticket_type');
        const RECOMMENDED_ARTICLES_CLASS = 'pix-recommanded-articles';

        try {
            ticketTypeInput.addEventListener('change', displayRecommendedArticles);
        } catch (error) {
            displayFreshdeskError(error);
        }

        function displayRecommendedArticles() {
            removeRecommandedArticleContainer();

            waitForFreshdesk().then(() => {
                const ticketType = ticketTypeInput.value;
                const articles = articlesRecommandes[ticketType];
                if (articles) {
                    const newRecommandedArticlesContainer = createRecommandedArticlesContainer(
                        getRootNode(ticketTypeInput),
                        getNextSibling(ticketTypeInput)
                    );
                    newRecommandedArticlesContainer.innerHTML =
                        generateRecommandedArticlesHTMLContent(articles);
                }
            });
        }

        function getRootNode(input) {
            try {
                const rootNode = input.parentNode.parentNode.parentNode;
                if (!rootNode) {
                    throw new Error();
                }
                return rootNode;
            } catch (error) {
                displayFreshdeskError(
                    'Impossible de trouver le noeud suivant, il faut mettre à jour notre sélecteur'
                );
            }
        }

        function getNextSibling(input) {
            try {
                const nextSibling = ticketTypeInput.parentNode.parentNode.nextSibling;
                if (!nextSibling) {
                    throw new Error();
                }
                return nextSibling;
            } catch (error) {
                displayFreshdeskError(
                    'Impossible de trouver le noeud suivant, il faut mettre à jour notre sélecteur'
                );
            }
        }

        function displayFreshdeskError(error) {
            console.log("Freshdesk a changé, les articles recommandés ne peuvent plus s'afficher");
            console.log(error);
        }

        function createRecommandedArticlesContainer(rootNode, referenceNode) {
            const recommandedArticlesContainer = document.createElement('section');
            recommandedArticlesContainer.classList.add(
                RECOMMENDED_ARTICLES_CLASS,
                'controls',
                'control-group'
            );

            rootNode.insertBefore(recommandedArticlesContainer, referenceNode);
            return recommandedArticlesContainer;
        }

        function removeRecommandedArticleContainer() {
            const alreadyRecommandedArticlesSection = document.getElementsByClassName(
                RECOMMENDED_ARTICLES_CLASS
            )[0];
            if (alreadyRecommandedArticlesSection !== undefined) {
                alreadyRecommandedArticlesSection.parentNode.removeChild(
                    alreadyRecommandedArticlesSection
                );
            }
        }

        function generateRecommandedArticlesHTMLContent(articles) {
            return articles
                .map((article) => {
                    if (typeof article === 'string') {
                        return '<p>' + article + '</p>';
                    } else if (
                        typeof article === 'object' &&
                        typeof article.lien === 'string' &&
                        typeof article.contenu === 'string'
                    ) {
                        return (
                            '<p><a href="' +
                            article.lien.trim() +
                            '" target="_blank" rel="noopener noreferrer">' +
                            article.contenu.trim() +
                            '</a></p>'
                        );
                    }
                })
                .join('');
        }

        /* Freshdesk ajoute son propre listener sur les champs imbriqués,
         * on attend qu'ils aient ajouté les champs conditionnel pour appliquer nos transformations */
        function waitForFreshdesk() {
            return new Promise(function (resolve, reject) {
                setTimeout(resolve, 0);
            });
        }
    </script>
</main>
